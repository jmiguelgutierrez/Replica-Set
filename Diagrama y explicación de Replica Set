REPLICA SET

                                     PRIMARIO
                                    __________
ASÍNCRONA                server1    __________
                         oplog      __________
                                    __________
                                      27017
                                  /          \  
              SECUNDARIO         /            \             SECUNDARIO                       
                 __________     /              \        __________
       server3   __________    /                \       __________      server2
       oplog     __________                             __________      oplog  
                 __________                             __________    
                   27019                                  27018
                   
Si el propio SERVIDOR primario deja de funcionar automaticamente uno de los SECUNDARIOS pasa a ser PRIMARIO y el tercero SECUNDARIO.

No es lo mismo que los RAID 0, 1 ó 5
Los RAID son Discos y estos son SERVIDORES

0,5 GB DE RAM a uno de 8 GB
El precio económico depende de las caracteristicas

ATLAS es una plataforma CLOUD

Community   }    Licencias de MONGO DB
Enterprise  }

El MONGO COMPASS esta instalado en Community

El secundario sigue replicando a los que siguen vivos.
Los muertos no se puede hacer nada.

Operaciones de RollBack cuando el SERVIDOR PRIMARIO ha fallado. El mecanismo es proporcional reconocimiento de escritura sobre uno o la mayoria.

C:\Users\manana> md data\server1
C:\Users\manana> md data\server2
C:\Users\manana> md data\server3
  %MONGO_DATA_PATH%

net
    port: 27017
    bindIp: 127.0.0.1
    
Poner si el servidor esta alojado en otro sitio

Ej: AWS
    ____________________________
    |                           |
    |                           |
    |                           |
    |                           |
    _____________________________
    ip: 142.23.7.12
    port: 27017
    Al arrancar mongod
    
    Cliente una IP y Servidor otra IP. Adaptador puente
    En el cmd
    >mongod --replSet clusterGetafe --dbpath data\server1 --port 27017
    >mongod --replSet clusterGetafe --dbpath data\server2 --port 27018
    >mongod --replSet clusterGetafe --dbpath data\server3 --port 27019
    
    >rs.config={
            _id: "clusterGetafe",
            members:[
                {_id:0,host:"localhost:27017},
                {_id:1,host:"localhost:27018},
                {_id:2,host:"localhost:27019}
                ])
    >rs.initiate(rs.config)
    Estamos conectados con la Shell a un cluster
    clusterGetafe:SECONDARY> rs.status()
    clusterGetafe:PRIMARY>
    
    >rs.isMaster()
    //Miembros que hay
    Ya está en PRIMARIO y podemos trabajar
    
    Operaciones de escritura solamente en el primario.
    
    oplog -> Se está ejecutando de manera idempotente
    Idempotente -> Lo ejecuta 1000 veces y obtienes el mismo resultado
    
    SINCRONO -> Secuencial
    ASINCRONO -> No se sabe cuanto va a tardar ni el orden
    
    mongoexport --port 27019 --collection=foo --db=getafeTest --foo.json
    Lo crea en C:\Users\manana\foo.json
    
    Sharding o escalado horizontal
                    __________________________________________
                    
    Para arrancar los 3 servidores lo hacemos desde la linea de comandos y luego ponemos
    
    mongo --port 27017 para el PRIMARIO
    
    rs.status() Ver las configuraciones
                    __________________________________________
    db.setSlaveOk()  -> Permiso de lectura
    show collections                   No podiamos leer en los SECUNDARIOS
    db.biblioteca.findOne()
    
    Solamente puede escribir el PRIMARIO
    db.setSlaveOk(false) -> Quita permisos de lectura
    
    Me incorpora el 27017 como SECUNDARIO
    
   REPLICA SET

                                     PRIMARIO
                                    __________
   ASÍNCRONA             server1    __________
                         oplog      __________
                                    __________                                       No hay Primario
                                      27017                                               en Lisboa
                                  /          \  
              SECUNDARIO         /            \             SECUNDARIO                       
                 __________     /              \        __________
       server3   __________    /                \       __________      server2       Lanzamos elecciones
       oplog     __________                             __________      oplog       para que uno sea Primario
                 __________                             __________    
                   27019      \                  /        27018
                               \                /
                                \              /
                          SECUNDARIO              SECUNDARIO   
                          ____________           ____________ 
             server4      ____________  _ _ _    ____________     server5
             oplog        ____________           ____________     oplog
                          ____________           ____________
                   

        El sistema no permite 2 primarios
        Se exige que haya mayoria
        
      PRIMARY>configuration.members[2].priority = 2
      PRIMARY>rs.config(configuration)
      
      PRIMARY>rs.add({host:"localhost:27020";priority:0; votes:0}
      PRIMARY>rs.status()
      
      El primario esta en el 27019                                              27017 -> SECUNDARIO
                                                                                27018 -> SECUNDARIO
                                                                                27019 -> PRIMARIO
                                                                                27020 -> SECUNDARIO
      configuracion = rs.config()
      
      PRIMARY>configuration.members[3].priority = 1
      PRIMARY>configuration.members[3].votes = 1
      
      > rs.config(configuracion)
      
      
                                     PRIMARIO
                                    __________
   ASÍNCRONA             server1    __________
                         oplog      __________
                                    __________                                       No hay Primario
                                      27019                                               en Lisboa
                                  /          \  
                 SECUNDARIO      /            \         SECUNDARIO                       
                 __________     /              \        __________
       server3   __________    /                \       __________      server2       Lanzamos elecciones
       oplog     __________                             __________      oplog       para que uno sea Primario
                 __________                             __________    
                   27017      \                  /        27018
                               \                /
                                \              /
                                  SECUNDARIO        
                                  ____________  
                     server4      ____________  
                      oplog       ____________  
                                  ____________                     
                                      27018     
                                      
  Vamos a añadir un quinto miembro para provocar el desempate.
                            ________________________________________
                            
   REPLICA SET

                                     PRIMARIO
                                    __________
ASÍNCRONA                local      __________
                         oplog      __________
                                    __________
                                      27017
                                  /          \  
              SECUNDARIO         /            \             SECUNDARIO                       
                 __________     /              \        __________
       local     __________    /                \       __________      local       Idempotente
       oplog     __________     _ _ _ _ _ _ _ _         __________      oplog  
                 __________                             __________    
                                 
        use local
        show collections
        db.oplog.rs.find()
        
        use getafeTest
        db.foo2.update({puntuacion:0},{$inc:{puntuacion:1}})
        db.oplog.rs.find().sort({$natural:-1})
        
       PRIMARY> for (i=0; i<100; i++)
                { db.foo3.insert ({a:i})}
       PRIMARY> db.foo3.find().count()
       PRIMARY> db.foo3.update({},{$set:{mensaje:"Hola"}},{multi:true})
       
      >db.oplog.rs.find({op:"i"}).sort({$natural:-1})
      Escribe la Tabla en local y no la Replica a todos los miembros de SET
      Delay -> Lo deja en el destino sin reconocimiento
      
      REPLICA SET OPLOG
      
      ROLLBACK                SPRING NODE                     Pasa a ser        
      ___________                         _________           Primario
      |_________|  100                   |_________| 100         y          
      |   PR    |  101       - - - - - - |   SC    | 101      nos quedamos
      |_________|  102                   |_________| 103      con 2 servidores
             \                                       104 
              \                __________  
               \____________  |_________| 100
                              |   SC    | 101
                              |_________|
 
      Delegamos  en la Aplicación de ese Sistema perdido o ese Servidor perdido.
      
      REPLICA SET OPLOG
      
      ROLLBACK                SPRING NODE                     Pasa a ser        
      ___________                         _________           Primario
      |_________|  100   Error en 103    |_________| 100         y          
      |   PR    |  101     latencia- - - |   SC    | 101      nos quedamos
      |_________|  102                   |_________|         con 2 servidores
             \                                        
              \                __________  
               \____________  |_________| 100
                              |   SC    | 101
                              |_________|
                              
                              
       show collections
       db.foo.insert({a:1},{w:"majority",j:true,wtiemout:5000})
       db.foo3.update({},{$set:{mensaje:"Hola"}},
                         {multi:true,w:"majority"})
                         
       SHARDING
          Escalabilidad horizontal
       
                             A P L I C A C I O N E S
                         
                         MongoS                     MongoS                    Config Server
                       _____|____                  _____|___
        El Sharding es a nivel de colección no de Base de Datos           
                                                                            REPLICA SET

                                     PRIMARIO
                                    __________
ASÍNCRONA                server1    __________
                         oplog      __________
                                    __________
                                      27017
                                  /          \  
              SECUNDARIO         /            \             SECUNDARIO                       
                 __________     /              \        __________
       server3   __________    /                \       __________      server2
       oplog     __________                             __________      oplog  
                 __________                             __________    
                   27019                                  27018
        
        
